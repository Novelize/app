//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum FileTypeEnum {
  Word
  PDF
  Epub
}

enum FontFamilyEnum {
  Courier
  Helvetica
  Times
}

enum PageSizeEnum {
  Letter
  Legal
  A4
}

enum TitleFontSizeEnum {
  Small36
  Medium48
  Large72
}

enum SubtitleFontSizeEnum {
  Small22
  Medium28
  Large36
}

enum SectionTitleFontSizeEnum {
  Small16
  Medium20
  Large24
}

enum SceneTitleFontSizeEnum {
  Small14
  Medium18
  Large22
}

enum SceneTextFontSizeEnum {
  Small12
  Medium14
  Large16
}

enum LineHeightEnum {
  Single
  OneHalf
  Double
}

enum NovelStatusEnum {
  Idea
  Writing
  Editing
  Finished
  Published
  Archived
}

enum GenreEnum {
  GeneralFiction
  Adventure
  Fantasy
  HistoricalFiction
  Horror
  MemoirAutobiography
  Mystery
  Romance
  ScienceFiction
  Thriller
  YoungAdult
  WomensFiction
}

model User {
  id                  BigInt           @id() @default(autoincrement())
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt()
  deletedAt           DateTime?
  authId              String           @unique() @db.VarChar(255)
  stripeId            String           @unique() @db.VarChar(255)
  isAdmin             Boolean          @default(false)
  email               String           @unique() @db.VarChar(255)
  firstName           String           @db.VarChar(255)
  lastName            String           @db.VarChar(255)
  penName             String?          @db.VarChar(255)
  novelLimit          Int              @default(1)
  hasFeatureHistory   Boolean          @default(false)
  hasFeatureNotebooks Boolean          @default(false)
  hasFeatureSeries    Boolean          @default(false)
  hasFeatureGoals     Boolean          @default(false)
  hasFeatureImport    Boolean          @default(false)
  hasFeaturePrint     Boolean          @default(false)
  ExportTemplates     ExportTemplate[]
  Goals               Goal[]
  Novels              Novel[]
  Notebooks           Notebook[]
  Scenes              Scene[]
  Sections            Section[]
  Series              Series[]
}

model ExportTemplate {
  id                   BigInt                   @id() @default(autoincrement())
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt()
  deletedAt            DateTime?
  userId               BigInt
  name                 String                   @db.VarChar(255)
  fileType             FileTypeEnum             @default(Word)
  fontFamily           FontFamilyEnum           @default(Helvetica)
  pageSize             PageSizeEnum             @default(Letter)
  titleFontSize        TitleFontSizeEnum        @default(Medium48)
  subtitleFontSize     SubtitleFontSizeEnum     @default(Medium28)
  SectionTitleFontSize SectionTitleFontSizeEnum @default(Medium20)
  sceneTitleFontSize   SceneTitleFontSizeEnum   @default(Medium18)
  sceneTextFontSize    SceneTextFontSizeEnum    @default(Medium14)
  lineHeight           LineHeightEnum           @default(Double)
  includeSectionNumber Boolean                  @default(false)
  includeChapterTitles Boolean                  @default(true)
  includeSceneTitles   Boolean                  @default(false)
  sceneDivider         String                   @default("*******")
  includePageNumbers   Boolean                  @default(false)
  includeNotes         Boolean                  @default(false)
  includeText          Boolean                  @default(true)
  isManuscript         Boolean                  @default(false)
  street               String?                  @db.VarChar(255)
  city                 String?                  @db.VarChar(255)
  state                String?                  @db.VarChar(255)
  zipcode              String?                  @db.VarChar(255)
  phone                String?                  @db.VarChar(255)
  User                 User                     @relation(fields: [userId], references: [id])
}

model Goal {
  id         BigInt    @id() @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt()
  deletedAt  DateTime?
  userId     BigInt
  novelId    BigInt?   @unique()
  isActive   Boolean   @default(true)
  sendReport Boolean   @default(false)
  total      Int
  daily      Int?
  weekly     Int?
  monday     Int?
  tuesday    Int?
  wednesday  Int?
  thursday   Int?
  friday     Int?
  saturday   Int?
  sunday     Int?
  startAt    DateTime  @default(now())
  User       User      @relation(fields: [userId], references: [id])
  Novel      Novel?    @relation(fields: [novelId], references: [id])
}

model Novel {
  id             BigInt          @id() @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt()
  deletedAt      DateTime?
  status         NovelStatusEnum @default(Idea)
  title          String          @db.VarChar(255)
  subtitle       String?         @db.VarChar(255)
  author         String?         @db.VarChar(255)
  genre          GenreEnum       @default(GeneralFiction)
  description    String?
  coverImagePath String?         @db.VarChar(255)
  isbn           String?         @db.VarChar(255)
  asin           String?         @db.VarChar(255)
  publishedAt    DateTime?
  summary        String?         @db.Text()
  beginning      String?         @db.Text()
  middle         String?         @db.Text()
  end            String?         @db.Text()
  Goal           Goal?
  goalId         BigInt?
  Notebook       Notebook?       @relation(fields: [notebookId], references: [id])
  notebookId     BigInt?
  Scenes         Scene[]
  Sections       Section[]
  Series         Series?         @relation(fields: [seriesId], references: [id])
  seriesId       BigInt?
  User           User            @relation(fields: [userId], references: [id])
  userId         BigInt
}

model Notebook {
  id          BigInt    @id() @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()
  deletedAt   DateTime?
  userId      BigInt
  name        String    @db.VarChar(255)
  description String?
  User        User      @relation(fields: [userId], references: [id])
  Novels      Novel[]
}

model Scene {
  id        BigInt    @id() @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  deletedAt DateTime?
  order     Int
  title     String    @db.VarChar(255)
  body      String?   @db.Text()
  notes     String?   @db.Text()
  wordCount Int       @default(0)
  Novel     Novel     @relation(fields: [novelId], references: [id])
  novelId   BigInt
  Section   Section   @relation(fields: [sectionId], references: [id])
  sectionId BigInt
  User      User      @relation(fields: [userId], references: [id])
  userId    BigInt
}

model Section {
  id        BigInt    @id() @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  deletedAt DateTime?
  isChapter Boolean   @default(true)
  order     Int?
  title     String    @db.VarChar(255)
  notes     String?
  Novel     Novel     @relation(fields: [novelId], references: [id])
  novelId   BigInt
  Scenes    Scene[]
  User      User      @relation(fields: [userId], references: [id])
  userId    BigInt
}

model Series {
  id          BigInt    @id() @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()
  deletedAt   DateTime?
  name        String    @db.VarChar()
  description String?
  Novels      Novel[]
  User        User      @relation(fields: [userId], references: [id])
  userId      BigInt
}
